program = { SOI ~ decl* ~ EOI }

decl = { directive | task | extern_task | struct | global }

directive = { "@" ~ #name = ident ~ "(" ~ directive_args? ~ ")" ~ ";" }
directive_args = _{ (#arg = value ~ ",")* ~ #arg = value }

extern_task = { "extern" ~ "task" ~ (#name = ident) ~ "(" ~ (param_list | #variadic = variadic_params)? ~ ")" ~ ("->" ~ #returns = type)? ~ ";" }

variadic_params = { "..." }

task = { "task" ~ (#name = ident) ~ "(" ~ param_list? ~ ")" ~ ("->" ~ #returns = type)? ~ "{" ~ (#body = statement)* ~ "}" }

struct = { "struct" ~ (#name = ident) ~ "{" ~ param_list ~ "}" }

global = { "global" ~ (#name = ident) ~ ":" ~ #type = type ~ "=" ~ #value = expression ~ ";" }

param_list = _{ (#param = ident ~ ":" ~ #type = type ~ ",")* ~ (#param = ident ~ ":" ~ #type = type) }

ident = @{ (ASCII_ALPHA | "_")+ ~ (ASCII_ALPHANUMERIC | "_")* }

type = { #any = any | #task_ptr = task_ptr | #bool = bool | #int = integer | #array = array | #ptr = pointer_to | #named = ident }
bool = { "bool" }
pointer_to = { "&" ~ type }
array = { "[" ~ #item = type ~ ";" ~ (#len = int_literal) ~ "]" }
int_literal = { ASCII_DIGIT+ }
integer = @{ ("u" | "i") ~ ("8" | "16" | "32" | "64") }
task_ptr = {"task" ~ "(" ~ task_ptr_args? ~ ")" ~ ("->" ~ #ptr_returns = type)? }
task_ptr_args = _{ (#type = type ~ ",")* ~ (#type = type) }
any = { "any" }

statement = { #cond = conditional | (#var_decl = var_decl | #assign = assign | (#return = return) | #sched = sched | #exit = exit | (#expr = expression)) ~ ";" }
sched = {"schedule" ~ #task = ident ~ "(" ~ arg_list? ~ ")" }
exit = { "exit" }
return = { "return" ~ expression? }
var_decl = { "var " ~ #name = ident ~ ":" ~ #type = type ~ "=" ~ #value = expression }
assign = { #location = expression ~ "=" ~ #value = expression}

conditional = { "if" ~ (#test = expression) ~ "{" ~ #then = statement* ~ "}" ~ ("else" ~ (("{" ~ #else = statement* ~ "}") | conditional))? }

expression = { equality }

equality = { comparison ~ (eq_op ~ comparison)* }
eq_op = {"==" | "!="}

comparison = { term ~ (cmp_op ~ term)* }
cmp_op = { ">" | ">=" | "<" | "<=" | "&&" | "||"}

term = { factor ~ (add_op ~ factor)* }
add_op = {"-" | "+"}

factor = { unary ~ (mul_op ~ unary)* }
mul_op = { "/" | "*" }

unary = { un_op ~ unary | postfix }
un_op = { "!" | "-" | "*" | "&" }

postfix = {  primary ~ postfix_op | primary }
postfix_op = _{ #index = index | #struct_access = struct_access | #cast = cast | #call = call }
struct_access = { "." ~ #member = ident }
cast = { "as" ~ #to = type }
call = { "(" ~ arg_list? ~ ")" }
index = { "[" ~ expression ~ "]" }

primary = { value | ident | "(" ~ expression ~ ")" }

arg_list = _{ (#arg = expression ~ ",")* ~ #arg = expression }

value = { #array = array_literal | #struct = struct_literal | string | #int = ASCII_DIGIT+ | #bool = ("true" | "false") | "'" ~ #char = (ASCII) ~ "'" }
struct_literal = { "{" ~ (#member = ident ~ ":" ~ #value = expression ~ ",")* ~ (#member = ident ~ ":" ~ #value = expression) ~ "}" }
array_literal = { "[" ~ (expression ~ ",")* ~ (expression)? ~ "]" }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

WHITESPACE = _{ WHITE_SPACE | NEWLINE }

COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }